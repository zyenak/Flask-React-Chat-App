{"ast":null,"code":"var _s = $RefreshSig$();\n// useSocket.js\nimport { useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nconst socketUrl = 'http://127.0.0.1:5000/';\nconst useSocket = () => {\n  _s();\n  const socketRef = useRef();\n  useEffect(() => {\n    // Create a new socket instance if it doesn't exist\n    if (!socketRef.current) {\n      socketRef.current = io(socketUrl);\n    }\n\n    // Cleanup on component unmount\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n      }\n    };\n  }, []);\n  return socketRef.current;\n};\n_s(useSocket, \"8c0rAI93JE8jpOVTnobt43KkFfY=\");\nexport default useSocket;","map":{"version":3,"names":["useEffect","useRef","io","socketUrl","useSocket","_s","socketRef","current","disconnect"],"sources":["D:/ZyPrograms/Quest/Projects/Chat/react-chat-app/src/UseSocket.js"],"sourcesContent":["// useSocket.js\r\nimport { useEffect, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst socketUrl = 'http://127.0.0.1:5000/';\r\n\r\nconst useSocket = () => {\r\n  const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n    // Create a new socket instance if it doesn't exist\r\n    if (!socketRef.current) {\r\n      socketRef.current = io(socketUrl);\r\n    }\r\n\r\n    // Cleanup on component unmount\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return socketRef.current;\r\n};\r\n\r\nexport default useSocket;\r\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,EAAE,MAAM,kBAAkB;AAEjC,MAAMC,SAAS,GAAG,wBAAwB;AAE1C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,SAAS,GAAGL,MAAM,CAAC,CAAC;EAE1BD,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACM,SAAS,CAACC,OAAO,EAAE;MACtBD,SAAS,CAACC,OAAO,GAAGL,EAAE,CAACC,SAAS,CAAC;IACnC;;IAEA;IACA,OAAO,MAAM;MACX,IAAIG,SAAS,CAACC,OAAO,EAAE;QACrBD,SAAS,CAACC,OAAO,CAACC,UAAU,CAAC,CAAC;MAChC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOF,SAAS,CAACC,OAAO;AAC1B,CAAC;AAACF,EAAA,CAlBID,SAAS;AAoBf,eAAeA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}